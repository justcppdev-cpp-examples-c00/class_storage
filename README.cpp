Классы хранения переменных:

| Описание                             | Продолжительность | Область видимости | Связывание |
|--------------------------------------|-------------------|-------------------|------------|
| Автоматическая                       | Автоматическая    | Блок              | Нет        |
| Регистровая                          | Автоматическая    | Блок              | Нет        |
| Статическая без связывния            | Статическая       | Блок              | Нет        |
| Статическая с внешним связыванием    | Статическая       | Файл              | Внешнее    |
| Статическая с внутренним связыванием | Статическая       | Файл              | Внутреннее |

Продолжительность хранения
- Автоматическая
- Статическая
- Динамическая
- Потоковая*

Область видимости:
- Блок (локальная)
- Файл (глобальная) ---+
- Прототип функции     |
- Пространство имен    |
    - именнованное     |
    - неименнованное   |
    - глобальное   <---+
- Класс

Связывание: [](разделяемость имени из разных единиц трансляции)
- Внутреннее
- Внешнее
    - ссылочное объявление
    - определяющее объявление
- Отсутсвие

+-------+
| STACK |
+-------+
|   |   |
|   v   |
|       |
|       |
|   ^   |
|   |   |
+-------+
| HEAP  |
+-------+
| BSS   |
+-------+
| DATA  |
+-------+
| TEXT  |
+-------+

Область видимости
=====

void foo(int n); // область видимости прототипа функции

void foo(int count) { // область видимости блока
    int x; // область видимости блока
    {
        int x; // область видимости блока
    }
}

class cls
{
    static int x; // область видимости класса
}

namespace NS {
    int x; // область видимости именнованного пространства имен
}

namespace {
    int x; // область видимости неименнованного пространства имен
}

int x; // область видимости глобального пространства имен

Связывание
=============
int x; // внешнее связывание с определяющим объявлением
extern int x; // внешнее связывание с ссылочное объявлением
static int x; // внутреннее связывание

void foo()
{
    static int x; // отсутсвие связывания
}

Продолжительность
==========

void foo() {
    auto int a; // автоматическая продолжительность
    register int r; // автоматическая продолжительность
    static int s; // статическая продолжительность
    int *d = new int; // динамическая продолжительность
}
